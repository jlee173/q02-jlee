        -:    0:Source:Piezas.cpp
        -:    0:Graph:Piezas.gcno
        -:    0:Data:Piezas.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "Piezas.h"
        -:    2:#include <iostream>
        -:    3:#include <vector>
        -:    4:using namespace std;
        -:    5:/** CLASS Piezas
        -:    6: * Class for representing a Piezas vertical board, which is roughly based
        -:    7: * on the game "Connect Four" where pieces are placed in a column and 
        -:    8: * fall to the bottom of the column, or on top of other pieces already in
        -:    9: * that column. For an illustration of the board, see:
        -:   10: *  https://en.wikipedia.org/wiki/Connect_Four
        -:   11: *
        -:   12: * Board coordinates [row,col] should match with:
        -:   13: * [2,0][2,1][2,2][2,3]
        -:   14: * [1,0][1,1][1,2][1,3]
        -:   15: * [0,0][0,1][0,2][0,3]
        -:   16: * So that a piece dropped in column 2 should take [0,2] and the next one
        -:   17: * dropped in column 2 should take [1,2].
        -:   18:**/
        -:   19:
        -:   20:
        -:   21:/**
        -:   22: * Constructor sets an empty board (default 3 rows, 4 columns) and 
        -:   23: * specifies it is X's turn first
        -:   24:**/
function _ZN6PiezasC2Ev called 35 returned 100% blocks executed 80%
       35:   25:Piezas::Piezas()
call    0 returned 100%
call    1 never executed
        -:   26:{
       35:   27:	int rowMax = 3;
       35:   28:	board.resize(3);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
branch  7 taken 100% (fallthrough)
branch  8 taken 0% (throw)
call    9 never executed
      140:   29:	for(int row = 0; row < rowMax; row++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   30:	{
      105:   31:		board[row].resize(4);
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
        -:   32:	}
       35:   33:	reset();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       35:   34:	turn = X;
       35:   35:}
        -:   36:
        -:   37:/**
        -:   38: * Resets each board location to the Blank Piece value, with a board of the
        -:   39: * same size as previously specified
        -:   40:**/
function _ZN6Piezas5resetEv called 36 returned 100% blocks executed 100%
       36:   41:void Piezas::reset()
        -:   42:{
       36:   43:	int rowMax = 3;
       36:   44:	int colMax = 4;
      144:   45:	for(int row = 0; row < rowMax; row++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   46:	{
      540:   47:		for(int col = 0; col < colMax; col++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   48:		{
      432:   49:			board[row][col] = Blank;
call    0 returned 100%
call    1 returned 100%
        -:   50:		}
        -:   51:	}
       36:   52:}
        -:   53:
        -:   54:/**
        -:   55: * Places a piece of the current turn on the board, returns what
        -:   56: * piece is placed, and toggles which Piece's turn it is. dropPiece does 
        -:   57: * NOT allow to place a piece in a location where a column is full.
        -:   58: * In that case, placePiece returns Piece Blank value 
        -:   59: * Out of bounds coordinates return the Piece Invalid value
        -:   60: * Trying to drop a piece where it cannot be placed loses the player's turn
        -:   61:**/ 
function _ZN6Piezas9dropPieceEi called 239 returned 100% blocks executed 92%
      239:   62:Piece Piezas::dropPiece(int column)
        -:   63:{
      239:   64:	int colMax = 4;
      239:   65:	int rowMax = 3;
      239:   66:	if(column >= colMax || column < 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:   67:	{
       13:   68:		if(turn == X)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        6:   69:			turn = O;
        -:   70:		else
        7:   71:			turn = X;
       13:   72:		return Invalid;
        -:   73:	}
      226:   74:	if(pieceAt(2, column) != Blank)
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:   75:	{
        1:   76:		if(turn == X)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   77:			turn = O;
        -:   78:		else
        1:   79:			turn = X;
        1:   80:		return Blank;
        -:   81:	}
      225:   82:	Piece value = turn;
      418:   83:	for(int row = 0; row < rowMax; row++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:   84:	{
      418:   85:		if(board[row][column] == Blank)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 54% (fallthrough)
branch  3 taken 46%
        -:   86:		{
      225:   87:			board[row][column] = turn;
call    0 returned 100%
call    1 returned 100%
      225:   88:			if(turn == X)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
      119:   89:				turn = O;
        -:   90:			else
      106:   91:				turn = X;
      225:   92:			return value;
        -:   93:		}
        -:   94:	}
    #####:   95:}
        -:   96:
        -:   97:
        -:   98:/**
        -:   99: * Returns what piece is at the provided coordinates, or Blank if there
        -:  100: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:  101:**/
function _ZN6Piezas7pieceAtEii called 244 returned 100% blocks executed 100%
      244:  102:Piece Piezas::pieceAt(int row, int column)
        -:  103:{
      244:  104:	int rowMax = 3;
      244:  105:	int colMax = 4;
      244:  106:	if((row >= rowMax || row <0) || (column >= colMax || column < 0))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
       12:  107:		return Invalid;
      232:  108:	return board[row][column];
call    0 returned 100%
call    1 returned 100%
        -:  109:}
        -:  110:		
        -:  111:
        -:  112:/**
        -:  113: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:  114: * is not over, or Blank if the board is filled and no one has won ("tie").
        -:  115: * For a game to be over, all locations on the board must be filled with X's 
        -:  116: * and O's (i.e. no remaining Blank spaces). The winner is which player has
        -:  117: * the most adjacent pieces in a single line. Lines can go either vertically
        -:  118: * or horizontally. If both X's and O's have the same max number of pieces in a
        -:  119: * line, it is a tie.
        -:  120:**/
function _ZN6Piezas9gameStateEv called 17 returned 100% blocks executed 100%
       17:  121:Piece Piezas::gameState()
        -:  122:{
       17:  123:	int rowMax = 3;
       17:  124:	int colMax = 4;
       17:  125:	int xCount = 1;
       17:  126:	int oCount = 1;
       17:  127:	int xMaxRow = 0;
       17:  128:	int oMaxRow = 0;
       17:  129:	int xMaxCol = 0;
       17:  130:	int oMaxCol = 0;
       65:  131:	for(int row = 0; row < rowMax; row++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  132:	{
      291:  133:		for(int col = 0; col <= colMax; col++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  134:		{
      243:  135:			if(board[row][col] == Blank)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1:  136:				return Invalid;
        -:  137:		}
        -:  138:	}
       64:  139:	for(int row = 0; row < rowMax; row++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  140:	{
      192:  141:		for(int col = 0; col < colMax-1; col++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:		{
      144:  143:			if(board[row][col] == board[row][col+1])
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 41% (fallthrough)
branch  5 taken 59%
        -:  144:			{
       59:  145:				if(board[row][col] == X)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 54% (fallthrough)
branch  3 taken 46%
       32:  146:					xCount++;
        -:  147:				else
       27:  148:					oCount++;
        -:  149:			}
        -:  150:		}
       48:  151:		if(xCount > xMaxRow)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
       25:  152:			xMaxRow = xCount;
       48:  153:		if(oCount > oMaxRow)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       24:  154:			oMaxRow = oCount;
       48:  155:		xCount = 1;
       48:  156:		oCount = 1;	
        -:  157:	}
       80:  158:	for(int col = 0; col < colMax; col++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  159:	{
      192:  160:		for(int row = 0; row < rowMax-1; row++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:		{
      128:  162:			if(board[row][col] == board[row+1][col])
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 40% (fallthrough)
branch  5 taken 60%
        -:  163:			{
       51:  164:				if(board[row][col] == X)
call    0 returned 100%
call    1 returned 100%
branch  2 taken 55% (fallthrough)
branch  3 taken 45%
       28:  165:					xCount++;
        -:  166:				else
       23:  167:					oCount++;
        -:  168:			}
        -:  169:		}
       64:  170:		if(xCount > xMaxCol)
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
       25:  171:			xMaxCol = xCount;
       64:  172:		if(oCount > oMaxCol)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
       26:  173:			oMaxCol = oCount;
       64:  174:		xCount = 1;
       64:  175:		oCount = 1;	
        -:  176:	}
       16:  177:	if(xMaxCol > xMaxRow)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        5:  178:		xMaxRow = xMaxCol;
       16:  179:	if(oMaxCol > oMaxRow)
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
        6:  180:		oMaxRow = oMaxCol;
       16:  181:	if(xMaxRow > oMaxRow)	
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        7:  182:		return X;
        9:  183:	if(oMaxRow > xMaxRow)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        7:  184:		return O;
        2:  185:	return Blank;
function _GLOBAL__sub_I__ZN6PiezasC2Ev called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        3:  186:}		
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
